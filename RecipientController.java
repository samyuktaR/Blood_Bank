package com.example.bloodbank;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.example.bloodbank.ResourceNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping(path="/recipient")
public class RecipientController {
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private RecipientRepository recipientRepository;
	
	public Recipient saveRecipient(Recipient recipient) {
		Request req = new Request();
		req.setRecipient(recipient);
		recipient = recipientRepository.save(recipient);
		return recipient;
	}
	
	@PostMapping//(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String bg, @RequestParam String location, 
			@RequestParam String mobile, @RequestParam String email, @RequestParam String status) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Recipient r = new Recipient();
	    r.setName(name);
	    r.setBg(bg);
	    r.setLocation(location);
	    r.setMobile(mobile);
	    r.setEmail(email);
	    r.setStatus(status);
	    recipientRepository.save(r);
	    return "Recipient Saved";
	  }
	
	@GetMapping//(path="/allrecipients")
	public @ResponseBody Iterable<Recipient> getAllRecipients() {
		// This returns a JSON or XML with the users
		return recipientRepository.findAll();
	}
	
	@GetMapping(path="/{id}")
	public @ResponseBody Optional<Recipient> getrecipient(@PathVariable("id") Integer id) {
		return recipientRepository.findById(id);
	}
	
	@PutMapping(path="/{id}")
	public ResponseEntity<Recipient> updateRecipientStatus(@PathVariable Integer id) {
		Optional<Recipient> recipientOptional = recipientRepository.findById(id);
		
		if (recipientOptional.isEmpty()) {
	        return ResponseEntity.notFound().build();
	    }
		
		Recipient recipient = recipientOptional.get();
		recipient.setStatus("approved");
		recipientRepository.save(recipient);
		return ResponseEntity.ok(recipient);
	}
	
	@DeleteMapping(path="/{id}")
	public void deleteUser(@PathVariable("id") Integer id) {
		recipientRepository.deleteById(id);
	}

	@DeleteMapping//(path="/allRecipients")
	public void deleteRecipients() {
		recipientRepository.deleteAll();
	}

}
