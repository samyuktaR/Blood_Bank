package com.example.bloodbank;

import java.util.List;
import java.util.Optional;

import com.example.bloodbank.ResourceNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping(path="/donor")
public class DonorController {
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private DonorRepository donorRepository;
	
	public Donor saveDonor(Donor donor) {
		Request req = new Request();
		req.setDonor(donor);
		donor = donorRepository.save(donor);
		return donor;
	}
	
	@PostMapping//(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String age, @RequestParam String bg
			, @RequestParam String location, @RequestParam String mobile, @RequestParam String email
			, @RequestParam String lastdonated) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Donor d = new Donor();
	    d.setName(name);
	    d.setAge(age);
	    d.setBg(bg);
	    d.setLocation(location);
	    d.setMobile(mobile);
	    d.setEmail(email);
	    d.setLastdonated(lastdonated);
	    donorRepository.save(d);
	    return "Donor Saved";
	  }
	
	@GetMapping(path="/alldonors")
	public @ResponseBody Iterable<Donor> getDonors() {
		// This returns a JSON or XML with the users
		return donorRepository.findAll();
	}
	
	@GetMapping(path="/{id}")
	public @ResponseBody Optional<Donor> getUser(@PathVariable("id") Integer id) {
		return donorRepository.findById(id);
	}

	@GetMapping
	public @ResponseBody List<Donor> getDonorByBg(@RequestParam("bg") String bg) {
		return donorRepository.findByBg(bg);
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<Donor> updateDonor(@PathVariable(value = "id") Integer id, @RequestBody Donor donorDetails) {

		try {
			Donor donor = donorRepository.findById(id)
					.orElseThrow(() -> new ResourceNotFoundException(id));

			donor.setName(donorDetails.getName());
			donor.setAge(donorDetails.getAge());
			donor.setBg(donorDetails.getBg());
			donor.setLocation(donorDetails.getLocation());
			donor.setMobile(donorDetails.getMobile());
			donor.setEmail(donorDetails.getEmail());
			donor.setLastdonated(donorDetails.getLastdonated());

			final Donor updatedDonor= donorRepository.save(donor);
			return ResponseEntity.ok(updatedDonor);
		} catch(ResourceNotFoundException e) {
			return ResponseEntity.notFound().build();
		}
	}

	@DeleteMapping(path="/{id}")
	public void deleteUser(@PathVariable("id") Integer id) {
		donorRepository.deleteById(id);
	}

	@DeleteMapping(path="/allDonors")
	public void deleteDonors() {
		donorRepository.deleteAll();
	}
}
